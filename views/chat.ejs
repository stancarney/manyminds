<!DOCTYPE html>
<html lang="en">
<head>
	<script src="/socket.io/socket.io.js"></script>
	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js"></script>
	<script type="text/javascript"
	        src="//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.0.2/bootstrap.min.js"></script>
	<script type="text/javascript" src="//twitter.github.com/bootstrap/assets/js/bootstrap-tab.js"></script>
	<script type="text/javascript" src="//twitter.github.com/bootstrap/assets/js/bootstrap-dropdown.js"></script>
	<script src="http://blueimp.github.com/JavaScript-Load-Image/load-image.min.js"></script>
	<script src="http://blueimp.github.com/JavaScript-Canvas-to-Blob/canvas-to-blob.min.js"></script>
	<script type="text/javascript" src="https://raw.github.com/blueimp/jQuery-File-Upload/master/js/jquery.fileupload.js"></script>
	<script type="text/javascript" src="https://raw.github.com/blueimp/jQuery-File-Upload/master/js/jquery.fileupload-fp.js"></script>
	<link rel="stylesheet" href="//twitter.github.com/bootstrap/assets/css/bootstrap.css"></link>
	<script>
		$(document).ready(function() {
			var channels = querystring()['c'];
			var typing = {};
			var hold = {};
			var loading = {};

			$(document).on('drop dragover', function (e) { e.preventDefault();});
			$(window).on('beforeunload', function() { socket.emit('quit'); });
			setInterval(function() { $("ul#users>li.typing").removeClass("typing"); }, 5000);

			var socket = io.connect('/');
			//called from server side on /join command.
			socket.on('join', function (channel) {
				addChannel(channel);
				channels.push(channel);
				updateQueryString();

				$('#tabs a:last').tab('show');
				$(textentryId(channel)).focus();
			});
			
			socket.on('new message', function (message) {
				$(contentId(message.channel)).append(messageDiv(message));
				if (!hold[message.channel]) autoScroll(message.channel);
			});

			socket.on('old message', function (message) {
				loading[message.channel] = true;
				$(contentId(message.channel)).prepend(messageDiv(message));
				$(contentId(message.channel)).scrollTop(1);
			});

			socket.on('complete', function (channel) { loading[channel] = false; }); //stop scrolling when the server says it is complete
			socket.on('day backward', function (channel, timestamp) { $(contentId(channel)).prepend('<div class="day"><span class="day">' + new Date(timestamp).toLocaleDateString() + '</span></div>'); });
			socket.on('day forward', function (channel, timestamp) { $(contentId(channel)).append('<div class="day"><span class="day">' + new Date(timestamp).toLocaleDateString() + '</span></div>'); });
			socket.on('add user', function (channel, username) { $(usersId(channel)).append('<li style="list-style-type:none" id="user_' + username + '"><i class="icon-user"></i> ' + username + '</li>'); });
			socket.on('remove user', function (channel, username) { $(userId(channel, username)).remove(); });
			socket.on('typing', function (channel, username) { $(userId(channel, username)).addClass('typing'); });

			for(i in channels) {
				addChannel(channels[i]);
				socket.emit('join', channels[i]);
				$('#tabs a:first').tab('show');
			}

			function addChannel(channel) {
				//setup channel vars
				typing[channel] = false;
				hold[channel] = false;
				loading[channel] = false;

				//Clone dummy channel
				var newChannel = $('#channel').clone();
				newChannel.css('display', '');
				newChannel.attr('id', channel);
				$('#channels').append(newChannel);

				autoScroll(channel);
				
				$('#tabs').append('<li><a id="'+ channel +'" href="#" class="tab" data-toggle="tab" data-target="#channels #' + channel + '">' + channel + '&nbsp;<i id="leave_' + channel + '" class="icon-remove"></i></a></li>');
				$('#tabs #' + channel).on("click", function(e) { autoScroll(channel); });
				$('a[data-toggle="tab"]').on('shown', function (e) { autoScroll($(e.target).attr('id')); });
				
				$(leaveId(channel)).on('click', function() {
					removeChannel(channel);
				}).mouseover(function() {
          $(this).addClass('pointer');
				});

				$(textentryId(channel)).on("keyup", function(e) {
					var textarea = $(textentryId(channel));
					if (e.keyCode == 13) {
						socket.emit('message', channel, textarea.val() );
						textarea.val('');
						autoScroll(channel);
					} else {
						if (!typing[channel]) {
							typing[channel] = true;
							socket.emit('typing', channel);
						}

						setTimeout(function() {
							typing[channel] = false;
						}, 2000);
					}
				});

				$(contentId(channel)).on("scroll", function() {
					$('img.lazy').each(function(index) {
						var viewable = isScrolledIntoView($(this));
						if(viewable && $(this).attr('orig')){
							$(this).attr('src', $(this).attr("orig")).removeAttr('orig');
						} else if(!viewable && $(this).attr('orig') == undefined) {
							$(this).attr('orig', $(this).attr("src"));
							$(this).attr('src', '/public/img/grey.gif');
						}
					});
					if (!loading[channel]) {
						if ($(contentId(channel)).scrollTop() == 0) {
							socket.emit('scroll', channel, $(contentId(channel)).find('div.message').first().attr('id'));
						}

						if ($(contentId(channel)).scrollTop() + $(contentId(channel)).height() == $(contentId(channel))[0].scrollHeight) {
							hold[channel] = false;
							autoScroll(channel);
						} else {
							hold[channel] = true;
						}
					}
				});

				$(contentId(channel)).fileupload({
						dataType: 'json',
						url: '/upload/' + channel,
						dropZone: $(contentId(channel)),
						process: [{
							action: 'load',
							fileTypes: /^image\/(gif|jpeg|png)$/,
							maxFileSize: 20000000 // 20MB
						},
						{
							action: 'resize',
							maxWidth: 500,
							maxHeight: 500
						},
						{
							action: 'save'
						}],
						drop: function (e, data) {
								$.each(data.files, function (index, file) {
									$(this).fileupload('send', {files: file});
								});
						},
						done: function (e, data) {
								$.each(data.result, function (index, file) {
										$('<p/>').text(file.name).appendTo(document.body);
								});
						}
				});
			}

			function updateQueryString() {
				window.history.pushState({}, "", "?c=" + channels.join("&c="));
			}

			function removeChannel(channel) {
				var index = channels.indexOf(channel);
				if(index != -1) channels.splice(index, 1);
				updateQueryString();
				socket.emit('leave', channel);
				$(contentId(channel)).remove();
				$("#" + channel).remove();
			}

			function autoScroll(channel) {
				var element = $(contentId(channel));
				element.animate({scrollTop: element[0].scrollHeight}, 0);
			}

			function messageDiv(message) {
				var div = null;
				switch (message.mime) {
					case 'image/jpeg':
					case 'image/png':
						div = '<div class="message" id=' + message._id + '>' + '[' + new Date(message.timestamp).toLocaleTimeString() + '] <strong>' + message.username + ':</strong><img class="lazy" src="/public/img/grey.gif" orig="' + message.path + '" alt="'+ message.filename + '"/></div>';
						break;
					case 'text/plain':
					default:
						div =  '<div class="message" id=' + message._id + '>' + '[' + new Date(message.timestamp).toLocaleTimeString() + '] <strong>' + message.username + ':</strong> ' + message.value + '</div>';
				}
				return div;
			}

			function isScrolledIntoView(elem) {
				var docViewTop = $(window).scrollTop();
				var docViewBottom = docViewTop + $(window).height();
				var elemTop = $(elem).offset().top;
				var elemBottom = elemTop + $(elem).height();
				return ((elemTop <= docViewBottom) && (elemBottom >= docViewTop));
			}

			function userId(channel, username) { return '#' + channel + ' #user_' + username; }
			function usersId(channel) { return '#' + channel + ' #users'; }
			function contentId(channel) { return '#' + channel + ' #content'; }
			function textentryId(channel) { return '#' + channel + ' #textentry'; }
			function leaveId(channel) { return '#leave_' + channel; }
			
			function querystring() {
				var nvpair = {};
				var pairs = window.location.search.replace('?', '').split('&');
				$.each(pairs, function(i, v) {
					var pair = v.split('=');
					if(!nvpair[pair[0]]) nvpair[pair[0]] = new Array();
					nvpair[pair[0]].push(pair[1]);
				});
				return nvpair;	
			}
		});

	</script>
	<style type="text/css">
		.header {
			position: absolute;
			left: 0;
			top: 0;
			width: 100%;
			height: 36px;
		}
		
		.content {
			position: absolute;
			left: 0;
			top: 36px;
			bottom: 0px;
			width: 100%;
		}
		
		.tab-content {
			display: inline;
		}

		.typing {
			color: #C43C35;
		}

		.pointer {
			cursor:pointer;
		}

		div.day {
			height: 1px;
			border-top: 1px solid #C43C35;
			text-align: center;
			position: relative;
			color: #C43C35;
		}

		span.day {
			position: relative;
			top: -.7em;
			background: white;
			display: inline-block;
		}
	</style>
</head>
<body>
	<div class="header">
		<ul id="tabs" class="nav nav-tabs"></ul>
	</div>
	<div class="content">
		<div class="tab-content">
			<div id="channels" class="tab-content"></div>
		</div>
	</div>
	<div id="channel" class="tab-pane" style="display:none;height:100%;">
		<div class="span2">
			<div class="well">
				<h3>Users</h3>
				<ul id="users"></ul>
			</div>
		</div>
		<div class="offset2" style="height:100%;">
			<div id="content" style="height:90%;overflow:scroll;overflow-x:auto;border-style:solid;border-width:1px;"></div>
			<div style="height:10%;">
				 <textarea id="textentry" style="height:100%;width:100%;padding: 0px;"></textarea>
			</div>
		</div>
	</div>
</body>
</html>
